# Retail Analytics Report

Q.1 provide a list of products with a base price > 500 and that are featured in BOGOF

select distinct p.product_code, p.product_name,p.category,f.base_price,f.promo_type 
from fact_events as f
join dim_products as p
on p.product_code = f.product_code
where base_price >500 and promo_type ="BOGOF";

-- ----------------------------------------------------------------------------------------------

-- Q.2 generate a report that showcase 
-- number of stores in each city ,order by descending

SELECT 
	  city, 
      COUNT(distinct store_id) AS store_count
FROM 
	  dim_stores
GROUP BY 
	  city
ORDER BY store_count DESC;
-- --------------------------------------------------------------------------------------------------

-- Q.3 Generate a report , showcase each compaign along with the total revenue before and after campaign
-- it includes campaign_name,total_revenue(before_promotion),total_revenue(after_promotion)

-- change column names 
ALTER TABLE fact_events
CHANGE COLUMN `quantity_sold(before_promo)` quantity_sold_before_promo INT;

ALTER TABLE fact_events
CHANGE COLUMN `quantity_sold(after_promo)` quantity_sold_after_promo INT;

SELECT 
    c.campaign_id,
    c.campaign_name,
    SUM(f.base_price * f.quantity_sold_before_promo)/1000000 AS Total_Revenue_Before_Promo_millions,
    SUM(
    (CASE WHEN f.promo_type = '25% off' THEN f.base_price * f.quantity_sold_after_promo ELSE 0 END)+
    (CASE WHEN f.promo_type = '33% off' THEN f.base_price * f.quantity_sold_after_promo ELSE 0 END)+
    (CASE WHEN f.promo_type = '50% off' THEN f.base_price * f.quantity_sold_after_promo ELSE 0 END) +
    (CASE WHEN f.promo_type = '500 off' THEN f.base_price * f.quantity_sold_after_promo ELSE 0 END) +
    (CASE WHEN f.promo_type = 'BOGOF' THEN f.base_price * f.quantity_sold_after_promo ELSE 0 END)
    ) /1000000 AS Total_Revenue_After_Promo_millions
FROM 
    fact_events AS f
JOIN 
    dim_campaigns AS c ON c.campaign_id = f.campaign_id
GROUP BY 
    c.campaign_id, c.campaign_name;

-- -----------------------------------------------------------------------------------------

-- Q.4 calculate ISU % for each category during diwali campaign . provides ranking based on ISU %,

SELECT
    p.category,
    SUM(f.quantity_sold_before_promo) AS total_quantity_sold_before_promo,
    SUM(f.quantity_sold_after_promo) AS total_quantity_sold_after_promo,
    SUM(f.quantity_sold_after_promo) - SUM(f.quantity_sold_before_promo) AS increase_sold_quantity,
    (SUM(f.quantity_sold_after_promo) - SUM(f.quantity_sold_before_promo)) / SUM(f.quantity_sold_before_promo) * 100 AS ISU_percentage
	
FROM 
    fact_events AS f
JOIN 
    dim_products AS p ON p.product_code = f.product_code
JOIN
	dim_campaigns as c ON f.campaign_id = c.campaign_id
WHERE 
    c.campaign_name = 'Diwali'
GROUP BY 
    p.category
ORDER BY 
	ISU_percentage DESC;
    
-- --------------------------------------------------------------------------------------

-- Q. 5 create a report featuring TOP 5 products by IR % across all campaigns

SELECT
    p.product_name,
    p.category,
    ROUND(SUM(f.quantity_sold_after_promo - f.quantity_sold_before_promo) / SUM(f.quantity_sold_before_promo)* 100,2) AS ISU_percentage
FROM 
    fact_events AS f
JOIN 
    dim_products AS p ON p.product_code = f.product_code
GROUP BY
    p.product_name,
    p.category
ORDER BY 
    ISU_percentage DESC
LIMIT 5;
-- ----------------------------------------------------------------------------------------
